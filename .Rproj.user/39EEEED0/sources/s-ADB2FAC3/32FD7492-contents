# Perform analyses of variance

rm(list = ls())

library(tidyverse)
library(knitr)
library(cowplot)
library(nmgc)

# Colors for each habitat
colors <- c(coastal = "darkgoldenrod1", coppice = "forestgreen", mangrove = "mediumseagreen")

# Variables to analyze
variables <- paste0("PC", 1:4)

# Keep only the significant islands?
keep <- c("Abaco", "Bimini", "Cayman Brac", "Little Cayman", "Long Island")

# Read the data
data <- read.csv("data/pca_islands.csv", header = TRUE)

# Test for multivariate normality within groups
mnorm <- test_multinorm(data, variables)
mnorm <- mnorm[, c("island", "habitat", "HZ", "pvalue")]
mnorm
write.csv(mnorm, "analyses/ANOVA/normality_test.csv", row.names = FALSE)
kable(mnorm, digits = c(0, 0, 2, 3), format = "latex")

# Test for homogeneity of covariance matrices
covtest <- test_covariance(data, variables)
covtest
write.csv(covtest, "analyses/ANOVA/homoskedasticity_test.csv", row.names = FALSE)
kable(covtest, digits = c(2, 0, 3), format = "latex")

# Test for outliers
test_outliers(data, variables) # no outlier detected

# Restrict to the most significant islands
data <- data %>% filter(island %in% keep) %>% droplevels()

# Perform ANOVAs
anovadata <- fit_nested_anovas(data, variables, nesting = "island", grouping = "habitat", posthoc = TRUE)
saveRDS(anovadata, "analyses/ANOVA/anova_results.rds")
head(anovadata)
kable(anovadata, digits = c(0, 0, 0, 0, 1, 1, 0, 1, 1, 4, 0, 4, 4, 4), format = "latex")
write.csv(anovadata, "analyses/ANOVA/anova_table.csv", row.names = FALSE)

########

# Plot the results of multiple analyses of variance onto boxplots
# of principal components

# Rearrange into a long table
data <- data %>% gather_("variable", "score", variables)

# Plot the data
p <- ggplot(data, aes(x = habitat, y = score, color = habitat)) +
  geom_violin(draw_quantiles = 0.5) +
  geom_jitter(width = 0.2, alpha = 0.5) +
  theme_bw() +
  facet_grid(variable ~ island, scales = "free_y") +
  xlab(NULL) +
  ylab("Principal component score") +
  labs(color = "Habitat") +
  scale_color_manual(values = colors) +
  theme(axis.text.x = element_text(angle = 60, hjust = 1), legend.position = "bottom")
p
ggsave("analyses/PCA/most_significant.png", p, width = 6, height = 6, dpi = 300)

# Add the minimum and maximum score per island (important for display)
anovadata <-  cbind(anovadata, data %>%
                      group_by(island, variable) %>%
                      summarize(ymax = max(score), ymin = min(score)) %>%
                      ungroup() %>%
                      group_by(variable) %>%
                      mutate(ymax = max(ymax), ymin = min(ymin)) %>%
                      ungroup() %>%
                      dplyr::select(ymin, ymax))

# Convert P-values into labels to display
anovadata <- anovadata %>%
  mutate(plabel = ifelse(pvalue < 0.0001, "P < 0.0001", paste("P =", round(pvalue, 4)))) %>%
  mutate(plabel = ifelse(pvalue < 0.05, paste(plabel, "*"), plabel))

# Add the P-values to the plot
p <- p + geom_text(data = anovadata, aes(
  x = NULL,
  color = NULL,
  label = plabel,
  y = 0.9 * ymin
), x = 3.5, hjust = 1, color = "black")

# What columns contain the posthoc test results?
posthoc_columns <- colnames(anovadata)[grep("posthoc_p", colnames(anovadata))]

# We need the habitat names here
habitat_names <- levels(data$habitat)

# Make a table with posthoc contrasts
posthocdata <- anovadata %>%
  group_by(island, variable, ymin, ymax) %>%
  dplyr::select(posthoc_columns) %>%
  ungroup() %>%
  gather_("contrast", "pvalue", posthoc_columns) %>%
  mutate(
    contrast = gsub("posthoc_p.", "", contrast),
    habitat1 = factor(gsub("\\..*$", "", contrast)),
    habitat2 = factor(gsub("^.*\\.", "", contrast))
  )

# Add the horizontal limits of the significance bars
posthocdata$x1 <- sapply(posthocdata$habitat1, function(habitat) which(habitat_names == habitat))
posthocdata$x2 <- sapply(posthocdata$habitat2, function(habitat) which(habitat_names == habitat))

# Choose the horizontal spacing so neighboring contrasts do not touch each other
xspacing <- c(-0.1, 0.1)
posthocdata <- posthocdata %>% mutate(x1 = x1 + xspacing[1], x2 = x2 + xspacing[2])

# Choose the vertical spacing for each contrast (relative to ymax) so different contrasts do not overlay
yspacing <- c(0.9, 1, 0.9)

# Add vertical spacing
posthocdata$yspacing <- yspacing[as.numeric(as.factor(posthocdata$contrast))]
posthocdata <- posthocdata %>% mutate(y = yspacing * ymax)

# Keep only the significant contrasts
posthocdata <- posthocdata %>% filter(pvalue < 0.05)

posthocdata

# Add the significant contrasts to the plot
p <- p + geom_segment(data = posthocdata, aes(x = x2, xend = x1, y = y, yend = y, color = NULL))

# Add whiskers
p <- p + geom_segment(data = posthocdata, aes(x = x2, xend = x2, y = y, yend = 0.95 * y, color = NULL)) +
  geom_segment(data = posthocdata, aes(x = x1, xend = x1, y = y, yend = 0.95 * y, color = NULL))

p

# We can add the rotation matrices to show how the wavelengths map onto the PCs
rotation <- readRDS("analyses/PCA/rotation_matrices.rds")

# Turn the rotation matrices into a data frame
rotation <- lapply(rotation, function(x) {
  x %>%
    data.frame() %>%
    rownames_to_column("wl") %>%
    mutate(wl = as.numeric(gsub("wl", "", wl)))
})
islands <- mrep(names(rotation), sapply(rotation, nrow))
rotation <- do.call("rbind", rotation)
rotation <- data.frame(rotation, island = islands)
rownames(rotation) <- NULL

head(rotation)

# Convert into a long data frame suitable for plotting
rotation <- rotation %>% gather_("variable", "loading", paste0("PC", 1:4))

# Reduce to the most significant islands?
rotation <- rotation %>% filter(island %in% keep)

# Plot the rotation matrices
map <- rotation %>%
  ggplot(aes(x = wl, y = variable, fill = loading)) +
  geom_tile() +
  theme_bw() +
  facet_grid(. ~ island) +
  ylab(NULL) +
  xlab("Wavelength (nm)") +
  labs(fill = "Loading") +
  scale_fill_gradient2(low = "darkblue", mid = "white", high = "darkgreen") +
  theme(legend.position = "bottom", axis.text.x = element_text(angle = 60, hjust = 1))

# Assemble the plots
leg1 <- get_legend(map)
leg2 <- get_legend(p)
map <- map + theme(legend.position = "none")
p <- p + theme(legend.position = "none")
legends <- plot_grid(leg1, leg2)
p2 <- plot_grid(map, p, legends, nrow = 3, rel_heights = c(4, 12, 1), labels = c("A", "B"))

p2
ggsave("analyses/ANOVA/anova.png", p2, height = 7.5, width = 7, dpi = 300)
