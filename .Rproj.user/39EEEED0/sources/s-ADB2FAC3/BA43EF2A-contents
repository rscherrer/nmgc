#' Nested ANOVA
#'
#' Performs (M)ANOVAs for multiple variables across different subsets of the data. Models fitted with OLS and GLS (allowing one independent residual variance per group) are compared with AIC and the best-fitting model is retained. Multiple post-hoc comparisons can be performed too.
#'
#' @param data A data frame
#' @param variables The variables to analyze
#' @param nesting The name of the nesting factor
#' @param grouping The name of the grouping factor
#' @param posthoc Whether to perform post-hoc tests (if the GLS-model is the best fit, nonparametetric Wilcoxonn tests are used for post-hoc comparisons, otherwise Tukey's HSD test is used)
#' @param to_pcomp Optional variables to perform PCA on
#' @param center,scale Parameters for `npcomp`
#' @param manova Whether to perform a MANOVA instead of multiple ANOVAs within each subset
#' @param test Test to use for the MANOVA (defaults to Pillai's trace). See `?summary.manova`
#' @param assumptions Whether to perform tests of assumptions for the MANOVA
#'
#' @details The analysis of variance is performed using a likelihood ratio test between a model including the factor of interest and a null model with intercept only. The LRT is done with models fitted with maximum likelihood. Model comparison between OLS and GLS is done with models fitted with restricted maximum likelihood, that include the factor to be tested (as per Zuur et al. 2009).
#'
#' @return If `manova` is FALSE, data frame containing the results of the ANOVAs for each variable and each subset of the data, including:
#'
#' \itemize{
##'  \item{best_fit}{ The best-fitting model (OLS or GLS)}
##'  \item{df_model}{ Model degrees of freedom}
##'  \item{AICc}{ AICc of the model}
##'  \item{dAICc}{ Difference in AICc between the GLS-model and the OLS-model}
##'  \item{df_LRT}{ Degrees of freedom of the likelihood ratio test}
##'  \item{loglik}{ Log-likelihood of the full model in LRT}
##'  \item{lratio}{ Chi-square value i.e. likelihood ratio between the full and the null model in LRT}
##'  \item{pvalue}{ P-value of the LRT}
##'  \item{posthoc_test}{ Post-hoc test used: Wilcoxon or Tukey}
##'  \item{posthoc_p...}{ Extra columns with the P-values for each contrast in the multiple post-hoc comparisons}
##' }
#'
#' Otherwise, a data frame with MANOVA results for each subset, including:
#'
#' \itemize{
#' \item{df}{ The degrees of freedom of the MANOVA}
#' \item{"statistic's name"}{ One of the statistics defined in `summary.manova` (Pillai, Wilks, etc.)}
#' \item{num_df}{ Numerator degrees of freedom of the F-test}
#' \item{denom_df}{ Denominator degrees of freedom of the F-test}
#' \item{pseudoF}{ Approximate F-statistic}
#' \item{pvalue}{ P-value of the F-test}
#' }
#'
#' If `assumptions` is TRUE, the resulting data frame is combined in a list with a list of three elements:
#' \itemize{
#' \item{multinorm}{ A data frame testing multivariate normality within each group and each subset. See `?test_multinorm`}
#' \item{cov}{ A data frame testing the homogeneity of covariance matrices between groups within each subset. See `?test_covaraince`}
#' \item{outliers}{ A nested list of outlier observations within each group and each subset. See `?test_outliers`}
#' }
#'
#' @export

nanova <- function(
  data, variables, grouping, nesting = NULL, posthoc = TRUE, to_pcomp = NULL,
  center = TRUE, scale = TRUE, manova = FALSE, test = "Pillai", assumptions = TRUE
) {

  library(nlme)
  library(MuMIn)
  library(tidyverse)

  if (!is.null(to_pcomp)) data <- data %>%
      cbind(npcomp(
        data, to_pcomp, center, scale, nesting, combine = TRUE,
        reduce = variables
      )$x %>% data.frame %>% dplyr::select(-nesting))

  if (is.null(nesting)) {
    data$nesting <- factor(1)
    nesting <- "nesting"
  }

  if (assumptions) {

    assum <- list(
      multinorm = test_multinorm(data, variables, grouping, nesting),
      cov = test_covariance(data, variables, grouping, nesting),
      outliers = test_outliers(data, variables, grouping, nesting)
    )

  }

  # For each island...
  data <- split(data, data[, nesting])

  anovadata <- data.frame(do.call("rbind", lapply(data, function(data) {

    data$group <- data[, grouping]

    # If MANOVA...
    if (manova) {

      X <- data[, variables] %>% as.matrix
      fit <- summary(manova(X ~ group, data), test = test)
      fit <- fit$stats %>% data.frame %>% .[1, ]
      colnames(fit) <- c("df", test, "pseudoF", "num_df", "den_df", "pvalue")
      return (fit)

    }

    # Otherwise, for each variable...
    t(sapply(variables, function(variable) {

      # Note: when using model fitting functions inside another function, avoid
      # passing them formulas as objects programatically, that will cause the anova.lme
      # call to crash. Instead create extra columns in the data frame with specific names
      # and explicitly pass those columns into the model fitting function

      data$X <- data[, variable]

      # Fit a linear model with generalized least squares
      mod_gls <- gls(X ~ group, data = data, weights = varIdent(form = formula(paste("~ 1 |", grouping))))

      # Fit a linear model with ordinary least squares
      mod_ols <- gls(X ~ group, data = data)

      # Compare the AICc of both
      aiccs <- unlist(AICc(mod_gls, mod_ols))
      delta_aicc <- aiccs[["AICc1"]] - aiccs[["AICc2"]]

      # Retain the best model
      best_mod <- mod_ols
      if (delta_aicc < 0) best_mod <- mod_gls

      # AICc, df and type of fit of the best model
      best_aicc <- ifelse(delta_aicc < 0, aiccs[["AICc1"]], aiccs[["AICc2"]])
      best_df <- ifelse(delta_aicc < 0, aiccs[["df1"]], aiccs[["df2"]])
      best_fit <- ifelse(delta_aicc < 0, 2, 1)

      # Refit the model with maximum likelihood (instead of REML)
      best_mod <- update(best_mod, method = "ML")

      # Perform the analysis of variance using likelihood ratio test
      best_mod0 <- update(best_mod, X ~ 1)

      anova_table <- anova(best_mod, best_mod0) %>% unlist()

      # Assemble the output we want to display
      dflrt <- anova_table[["df1"]] - anova_table[["df2"]]
      loglik <- anova_table[["logLik1"]]
      lratio <- anova_table[["L.Ratio2"]]
      pvalue <- anova_table[["p-value2"]]

      # Prepare output
      out <- c(
        best_fit = best_fit,
        df_model = best_df,
        AICc = best_aicc,
        dAICc = delta_aicc,
        df_LRT = dflrt,
        loglik = loglik,
        lratio = lratio,
        pvalue = pvalue
      )

      # Multiple comparisons

      if (posthoc) {

        # If GLS is the best fit...
        if (best_fit == 2) {

          # Perform multiple comparisons using Wilcoxon tests
          posthoc_test <- 2

          group_names <- levels(data[, grouping])

          # For each comparison of habitats...
          posthoc_p <- sapply(seq_len(length(group_names) - 1), function(i) {
            sapply(seq(i + 1, length(group_names)), function(j) {

              # Perform a Wilcoxon test
              pval <- wilcox.test(data[data[grouping] == group_names[j], variable], data[data[grouping] == group_names[i], variable])$p.value
              names(pval) <- paste0(group_names[j], "-", group_names[i])
              return (pval)

            })
          }) %>% unlist()

        } else {

          # Otherwise perform standard posthoc Tukey's HSD test
          posthoc_test <- 1
          posthoc_p <- TukeyHSD(aov(X ~ group, data))$group
          posthoc_p <- posthoc_p[, "p adj"]

        }

        out <- c(out, posthoc_test = posthoc_test, posthoc_p = posthoc_p)

      }

      return (out)

    }))
  })))

  if (!manova) {

    # Package the output nicely
    anovadata <- data.frame(rep(names(data), each = length(variables)), variable = rep(variables, length(data)), anovadata)
    colnames(anovadata)[1] <- nesting
    anovadata <- anovadata %>% mutate(best_fit = factor(best_fit))
    if (posthoc) anovadata <- anovadata %>% mutate(posthoc_test = factor(posthoc_test))

    levels(anovadata$best_fit) <- c("OLS", "GLS")
    if (posthoc) levels(anovadata$posthoc_test) <- c("Tukey", "Wilcoxon")

  }

  if (assumptions) anovadata <- list(anova = anovadata, assum = assum)

  return (anovadata)

}
