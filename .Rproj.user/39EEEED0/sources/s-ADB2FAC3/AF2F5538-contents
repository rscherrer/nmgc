# This pipeline performs the following tests
# 1. MANOVA and tests of MANOVA assumptions
# 2. Multiple ANOVAs accounting for heteroskedasticity and posthoc tests
# 3. Plotting of the results
# 4. Identification of deviations from normality
# 5. Repeat tests with Kruskal-Wallis when such deviations occur

rm(list = ls())

library(nmgc)
library(tidyverse)
library(cowplot)

data <- read.csv("data/reflectance.csv", header = TRUE)

variables <- paste0("PC", 1:4)

#### MANOVA and test its assumptions ####

res_manova <- nanova(
  data, variables, grouping = "habitat", nesting = "island", to_pcomp = paste0("wl", 300:700),
  manova = TRUE, test = "Wilks"
)

res_manova$anova # MANOVA table
res_manova$assum$multinorm # Multivariate normality
res_manova$assum$cov # Homogeneity of covariance matrices
res_manova$assum$outliers %>% map(~ .x %>% do.call("c", .)) %>% do.call("c", .) # Outliers

# Save some tables
write.csv(res_manova$anova, "table_manova.csv", row.names = FALSE)
write.csv(res_manova$assum$multinorm, "table_multinorm.csv", row.names = FALSE)
write.csv(res_manova$cov, "table_homoskedasticity.csv", row.names = FALSE)

# Most islands are significant but the assumptions are doubious.
# Classification may be more accurate, or correction of P-values?

res_manova$anova$padj <- res_manova$anova$pvalue %>% p.adjust(method = "BH")
res_manova$anova

# Still more significant islands than machine learning

# Keep the most significant islands only
sislands <- c("Abaco", "Bimini", "Cayman Brac", "Little Cayman", "Long Island")
data <- data %>% filter(island %in% sislands) %>% droplevels

#### Multiple ANOVAs ####

# Then fit multiple ANOVAs on PCs
res_anova <- nanova(
  data, variables, grouping = "habitat", nesting = "island", to_pcomp = paste0("wl", 300:700),
  posthoc = TRUE, assumptions = FALSE
)

# Check out the results
head(res_anova)
write.csv(res_anova, "table_anova.csv", row.names = FALSE)

# Perform KW tests and record tests of univariate normality (for later)
res_kw <- nanova(
  data, variables, grouping = "habitat", nesting = "island", to_pcomp = paste0("wl", 300:700),
  assumptions = TRUE, univariate = TRUE, kw = TRUE
)

#### Plot ####

# Prepare PCA data for plotting
pca <- npcomp(data, paste0("wl", 300:700), nesting = "island", combine = TRUE, reduce = 1:4)
pcdata <- pca$x
rotation <- pca$rotation

data <- cbind(data, pcdata[, variables])
data <- data %>% gather_("variable", "score", variables)

# Plot the data
p <- data %>%
  ggplot(aes(x = habitat, y = score)) +
  geom_violin(aes(color = habitat)) +
  geom_jitter(aes(color = habitat), alpha = 0.5, width = 0.2) +
  facet_grid(variable ~ island, scales = "free_y") +
  theme_bw() +
  labs(x = NULL, y = "Principal component score", color = "Habitat") +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
  scale_color_manual(values = c(coastal = "darkgoldenrod1", coppice = "forestgreen", mangrove = "mediumseagreen"))

# Add P-values
res_anova <- res_anova %>%
  mutate(plabel = round(pvalue, 4) %>% paste("P =", .)) %>%
  mutate(plabel = ifelse(pvalue < 0.0001, "P < 0.0001", plabel)) %>%
  mutate(plabel = ifelse(pvalue < 0.05, str_replace(plabel, "$", "*"), plabel))

res_anova <- res_anova %>%
  right_join(
    data %>%
      group_by(variable) %>%
      mutate(ymin = min(score), ymax = max(score)) %>%
      ungroup() %>%
      group_by(island, variable) %>%
      summarize(ymin = first(ymin), ymax = first(ymax))
  )

head(res_anova)

p <- p + geom_text(data = res_anova, aes(label = plabel, y = ymin), x = 3.5, hjust = 1,
                   size = 3)

# Add posthoc bars
posthoc_cols <- colnames(res_anova)[grep("posthoc_p", colnames(res_anova))]
posthoc <- res_anova %>%
  gather_("contrast", "posthoc_p", posthoc_cols)
posthoc <- posthoc %>%
  mutate(contrast = contrast %>% str_replace("^.*_p.", "")) %>%
  mutate(contrast1 = contrast %>% str_replace("^.*\\.", "")) %>%
  mutate(contrast2 = contrast %>% str_replace("\\..*$", "")) %>%
  filter(pvalue < 0.05) %>%
  filter(posthoc_p < 0.05)
posthoc <- posthoc %>%
  mutate(xmin = sapply(contrast1, function(x) which(x == levels(data$habitat)))) %>%
  mutate(xmax = sapply(contrast2, function(x) which(x == levels(data$habitat)))) %>%
  mutate(xmin = xmin + 0.1, xmax = xmax - 0.1) %>%
  mutate(y = ifelse(xmax == 2.9 & xmin == 1.1, ymax, ymax - 0.05 * (ymax - ymin)))

p <- p + geom_segment(data = posthoc, aes(
  x = xmin, y = y, xend = xmax, yend = y, color = NULL
))

# Add whiskers

# Left whiskers
p <- p + geom_segment(data = posthoc, aes(
  x = xmin, y = y, xend = xmin, yend = y - 0.02 * (ymax - ymin), color = NULL
))

# Right whiskers
p <- p + geom_segment(data = posthoc, aes(
  x = xmax, y = y, xend = xmax, yend = y - 0.02 * (ymax - ymin), color = NULL
))

p

# Add rotation matrices
rotplot <- rotation %>%
  gather_("PC", "loading", variables) %>%
  mutate(variable = variable %>% str_replace("wl", "") %>% as.numeric) %>%
  ggplot(aes(x = variable, y = PC, fill = loading)) +
  geom_tile() +
  facet_grid(. ~ island) +
  scale_fill_gradient2(low = "darkblue", mid = "white", high = "darkgreen") +
  labs(y = NULL, x = "Wavelength (nm)", fill = "Loading") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1), legend.key.height = unit(0.2, "in"))

plot_grid(rotplot, p, nrow = 2, rel_heights = c(1, 3), labels = c("A", "B"))
ggsave("figure_anova.png", width = 7, height = 7, dpi = 400)

#### Kruskal-Wallis back-up tests ####

# What groups deviate from multivariate normality?
devs <- res_manova$assum$multinorm %>%
  filter(pvalue < 0.05) %>%
  filter(island %in% sislands) %>%
  select_at(c("island", "habitat"))

# Of these islands, what variables deviate from normality?
devs2 <- devs %>%
  as.list %>%
  pmap_dfr(~ res_kw$assum$multinorm %>% filter(island == .x & habitat == .y))

write.csv(devs2, "table_normality.csv", row.names = FALSE)

devs2 <- devs2 %>%
  filter(pvalue < 0.05) %>%
  select_at(c("island", "habitat", "variable"))

# We keep only the KW results for those cases
res_kw_final <- res_kw$kw %>% filter(island %in% devs2$island & variable %in% devs2$variable)

write.csv(res_kw_final, "table_kw.csv", row.names = FALSE)

res_kw_final %>% filter(pvalue < 0.05)
